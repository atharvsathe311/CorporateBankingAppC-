// <auto-generated />
using System;
using CorporateBankingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CorporateBankingApp.Migrations
{
    [DbContext(typeof(CorporateBankAppDbContext))]
    [Migration("20241004212839_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CorporateBankingApp.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankIFSCCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankKycId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserLoginId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("BankId");

                    b.HasIndex("BankKycId");

                    b.HasIndex("UserLoginId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.BankAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<double>("BlockedFunds")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.BankKyc", b =>
                {
                    b.Property<int>("BankKycId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankKycId"));

                    b.Property<int>("AnnualReportsFileId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialStatementsFileId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseRegulatorApprovalsOrLicenseAgreementFileId")
                        .HasColumnType("int");

                    b.Property<string>("TaxpayerIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankKycId");

                    b.HasIndex("AnnualReportsFileId");

                    b.HasIndex("FinancialStatementsFileId");

                    b.HasIndex("LicenseRegulatorApprovalsOrLicenseAgreementFileId");

                    b.ToTable("BankKycs");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankAccountAccountId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryLists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientKycId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FounderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserLoginId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isBeneficiaryOutbound")
                        .HasColumnType("bit");

                    b.HasKey("ClientId");

                    b.HasIndex("BankAccountAccountId");

                    b.HasIndex("ClientKycId");

                    b.HasIndex("UserLoginId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.ClientKyc", b =>
                {
                    b.Property<int>("ClientKycId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientKycId"));

                    b.Property<int>("BankAccessFileId")
                        .HasColumnType("int");

                    b.Property<string>("CINNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MOUFileId")
                        .HasColumnType("int");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerOfAttorneyFileId")
                        .HasColumnType("int");

                    b.HasKey("ClientKycId");

                    b.HasIndex("BankAccessFileId");

                    b.HasIndex("MOUFileId");

                    b.HasIndex("PowerOfAttorneyFileId");

                    b.ToTable("ClientKyc");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CounterValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClientCounter");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.FileDetail", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.SuperAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserLoginId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("AdminId");

                    b.HasIndex("UserLoginId");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverBankId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderBankId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LoginUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Bank", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.BankKyc", "BankKyc")
                        .WithMany()
                        .HasForeignKey("BankKycId");

                    b.HasOne("CorporateBankingApp.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankKyc");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.BankAccount", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.Bank", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporateBankingApp.Models.BankKyc", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.FileDetail", "AnnualReports")
                        .WithMany()
                        .HasForeignKey("AnnualReportsFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorporateBankingApp.Models.FileDetail", "FinancialStatements")
                        .WithMany()
                        .HasForeignKey("FinancialStatementsFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorporateBankingApp.Models.FileDetail", "LicenseRegulatorApprovalsOrLicenseAgreement")
                        .WithMany()
                        .HasForeignKey("LicenseRegulatorApprovalsOrLicenseAgreementFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnualReports");

                    b.Navigation("FinancialStatements");

                    b.Navigation("LicenseRegulatorApprovalsOrLicenseAgreement");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Client", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountAccountId");

                    b.HasOne("CorporateBankingApp.Models.ClientKyc", "ClientKyc")
                        .WithMany()
                        .HasForeignKey("ClientKycId");

                    b.HasOne("CorporateBankingApp.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId");

                    b.Navigation("BankAccount");

                    b.Navigation("ClientKyc");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.ClientKyc", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.FileDetail", "BankAccess")
                        .WithMany()
                        .HasForeignKey("BankAccessFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorporateBankingApp.Models.FileDetail", "MOU")
                        .WithMany()
                        .HasForeignKey("MOUFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorporateBankingApp.Models.FileDetail", "PowerOfAttorney")
                        .WithMany()
                        .HasForeignKey("PowerOfAttorneyFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccess");

                    b.Navigation("MOU");

                    b.Navigation("PowerOfAttorney");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.SuperAdmin", b =>
                {
                    b.HasOne("CorporateBankingApp.Models.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("CorporateBankingApp.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
